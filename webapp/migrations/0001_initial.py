# Generated by Django 3.2.5 on 2021-07-28 16:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_organization', models.BooleanField(default=False, verbose_name='is organization?')),
                ('is_creator', models.BooleanField(default=False, verbose_name='is creator?')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logos/', verbose_name="organization's logo")),
                ('old_website', models.URLField(blank=True, null=True, verbose_name="previous organization's website")),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
            ],
        ),
        migrations.CreateModel(
            name='Creator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, null=True, verbose_name='last name')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_closed', models.BooleanField(default=False, verbose_name='is closed?')),
                ('announcement', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='webapp.announcement')),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('FE', 'Front-End Developer'), ('FS', 'Full-Stack Developer'), ('BE', 'Back-End Developer'), ('GD', 'Graphic Designer')], max_length=2)),
                ('is_admin', models.BooleanField(default=False, verbose_name='is admin?')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.creator')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.team')),
            ],
            options={
                'unique_together': {('creator', 'team')},
            },
        ),
        migrations.AddField(
            model_name='team',
            name='members',
            field=models.ManyToManyField(related_name='teams', through='webapp.TeamMember', to='webapp.Creator'),
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name="organization's name")),
                ('category', models.CharField(choices=[('DP', 'Działalnośc prospołeczna'), ('EiW', 'Edukacja i wychowanie'), ('WON', 'Wspanie osób niepełnosprawnych'), ('KSiT', 'Kultura, Sztuka i Technologia'), ('OZiZ', 'Ochrona zdrowia i życia'), ('DCh', 'Działalność charytatywna'), ('PDzi', 'Pomoc Dzieciom'), ('SiR', 'Sport i rekreacja'), ('OSiPZ', 'Ochorna środowiska i praw zwierząt')], max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=9, null=True, verbose_name='phone number')),
                ('fb_url', models.URLField(blank=True, null=True, verbose_name='facebook page URL')),
                ('twitter_url', models.URLField(blank=True, null=True, verbose_name='twitter accout URL')),
                ('KRS', models.CharField(blank=True, max_length=10, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='announcement',
            name='organization',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='webapp.organization'),
        ),
    ]
